repository.gerrit.name = Gerrit
repository.gerrit.hostname = Repository Hostname
repository.gerrit.hostname.description = The hostname of the Gerrit review system.
repository.gerrit.port = Repository Port
repository.gerrit.port.description = The assigned listening port.
repository.gerrit.project = Project
repository.gerrit.project.description = The project name. Ex: gReview.git
repository.gerrit.username = Username
repository.gerrit.username.description = Username you want to use to authenticate with http(s) or SSH repository.
repository.gerrit.password = Password
repository.gerrit.password.description = Password you want to use to authenticate with http(s) or SSH repository.
repository.gerrit.branch = Branch
repository.gerrit.branch.description = The name of the branch which trigger build.\
Empty - all branches will check.\
If branch starts with ^ it matches branch names by regular expression patterns. The dk.brics.automaton library is used for evaluation of such patterns.
repository.gerrit.ssh.key = SSH Key
repository.gerrit.ssh.key.description = SSH private key you want to use to access the repository.
repository.gerrit.ssh.key.change = Change SSH key?
repository.gerrit.ssh.passphrase = SSH Passphrase
repository.gerrit.ssh.passphrase.description = Passphrase you want to use to access SSH private key.

repository.gerrit.drafts = Drafts changes
repository.gerrit.drafts.description = If enabled drafts change from gerrit will also trigger build.

repository.gerrit.useShallowClones = Use shallow clones
repository.gerrit.useShallowClones.description = Fetches the shallowest commit history possible. Do not use if your build depends on full repository history.

repository.gerrit.useSubmodules = Use submodules
repository.gerrit.useSubmodules.description = Enable submodules support if defined for repository. If native Git capability is not defined for agent submodules support would be disabled.
repository.gerrit.commandTimeout = Command timeout (minutes)
repository.gerrit.commandTimeout.description = Specifies how many minutes are given for git commands to finish. Default is 180 (3 hours).
repository.gerrit.verbose.logs = Verbose logs
repository.gerrit.verbose.logs.description = Outputs more verbose logs from git commands.
repository.gerrit.rebuildTimeout = Try the same build after (minutes)
repository.gerrit.rebuildTimeout.description = The same unverified change will not trigger the build before this timeout

repository.gerrit.messages.branchIntegration.shallowClonesWillBeDisabled = Shallow clones will be disabled when performing branch integration.
repository.gerrit.messages.ccRepositoryNeverChecked = Never checked Gerrit, obtaining latest revision {0}.
repository.gerrit.messages.ccRecover.completed = Gerrit Query Successful.

repository.gerrit.messages.error.ssh.key.read = Cannot read uploaded ssh key file!
repository.gerrit.messages.error.ssh.key.missing = You must provide your private key to connect!
repository.gerrit.messages.error.connection = Failed to establish connection to Gerrit!
repository.gerrit.messages.error.retrieve = Failed to retrieve change from Gerrit via revision

processor.gerrit.messages.build.verified.pos = Setting Verified +1 in Gerrit...
processor.gerrit.messages.build.verified.neg = Setting Verified -1 in Gerrit...
processor.gerrit.messages.build.verified.None = No New Changes Retrieved from Gerrit, reverting to master branch....
processor.gerrit.messages.build.verified.failed = Failed to Verify Change, {0}, in Gerrit!
processor.gerrit.messages.build.verified.merged = Change, {0}, has already been verified and merged.
processor.gerrit.messages.build.error.nochanges = This seems to be a new install, please submit change to Gerrit before polling system.
processor.gerrit.messages.build.sucess = Bamboo: Build Successful: {0}
processor.gerrit.messages.build.failed = Bamboo: Build Failed! URL: {0}
processor.gerrit.messages.build.custom = Bamboo: Build Failed! Reason: {0} URL: {1}
processor.gerrit.messages.build.custom.url = Bamboo: {0} URL: {1}

gerrit.product.description=<a href="https://code.google.com/p/gerrit/">Gerrit</a> is a Code Review platform.
gerrit.build.processor.section.title=Should Bamboo update the change verification on Gerrit?
gerrit.build.processor.run=Run Gerrit Verification after main build.

gerrit.change.secure.url=ChangeID: {1} {2} Comment: {3}
gerrit.change.unsecure.url=ChangeID: <a href="http://{0}/#/c/{1}/">{2}</a><br>Comment: {3}

webitems.build.submenu.gerrit=Gerrit

webRepositoryViewer.gitweb.url = Gitweb URL
webRepositoryViewer.gitweb.url.description = This is the URL of your Gitweb instance e.g http://gitweb.company.com
webRepositoryViewer.gitweb.repo = Repository Name
webRepositoryViewer.gitweb.repo.description = The name of the repository in Gitweb e.g myProject
webRepositoryViewer.gitweb.path = Repository Path
webRepositoryViewer.gitweb.path.description = The path from the root of the SCM to the Gitweb Repository.  This makes the difference between a file as defined by the SCM and as seen in Gitweb e.g. /atlassian/myProject/trunk/
webRepositoryViewer.gitweb.viewChangeset = View change set in Gitweb
webRepositoryViewer.gitweb.error.cantCreateUrl = Unable to create URL - please check your Gitweb Web Repository configuration

plugin.groupId=${project.groupId}
plugin.artifactId=${project.artifactId}
plugin.version=${project.version}
plugin.key=${atlassian.plugin.key}
